/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"

#include "ns3/csma-helper.h"
#include "ns3/mobility-module.h"
#include "ns3/wifi-module.h"
#include "ns3/olsr-module.h"
#include "ns3/flow-monitor-module.h"
#include "myapp.h"
#include "poissonDist.h"
#include "cauchyDist.h"
using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("TallerNS3");

int
main (int argc, char *argv[])
{
//Defining constant phymode
std::string phyMode ("DsssRate1Mbps");

Time::SetResolution (Time::NS);
  LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
  LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);

   CommandLine cmd;
   cmd.Parse (argc, argv);
/*___________________________Bridge Nodes Creation__________________________________________*/



        //Bridge Nodes (0 cabled, 1 wireless)
        NodeContainer bridgeNodes; 
        bridgeNodes.Create(2);

        PointToPointHelper pointToPoint;
        pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
        pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

        // se crea construyen los enlaces punto a punto entre los dispositivos
        NetDeviceContainer bridgeDevices;
        bridgeDevices.Add (pointToPoint.Install (bridgeNodes));



/*_______________________________Cabled Nodes Creation_______________________________________*/



        // Create the cabled bridge (0 index) and 4 cable nodes
        NodeContainer cabledNodes;
        cabledNodes.Add(bridgeNodes.Get(0));
        cabledNodes.Create(4);

        //creating a hub to connect all the cable nodes
        CsmaHelper hub_0;
        hub_0.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
        hub_0.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

        //Assing the hub 0 links to the nodes (OSI Layer 1)
        NetDeviceContainer cableDevices = hub_0.Install(cabledNodes);



/*_____________________________________Wireless Nodes Creation_______________________________*/


        // Create the wireless bridge (0 index) and 6 wireless nodes
        NodeContainer wirelessNodes;
        wirelessNodes.Add(bridgeNodes.Get(1));
        wirelessNodes.Create(6);

        // Creating the WIFI Helper
        WifiHelper wifi;

        //Configuring the helper for 802.11 Protocol
          YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
          wifiPhy.SetPcapDataLinkType (YansWifiPhyHelper::DLT_IEEE802_11);

          YansWifiChannelHelper wifiChannel ;
          wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");
          wifiChannel.AddPropagationLoss ("ns3::TwoRayGroundPropagationLossModel",
	          	  	  	  	  	  	  	    "SystemLoss", DoubleValue(1),
		          	  	  	  	  	  	    "HeightAboveZ", DoubleValue(1.5));

          // Configuring the phisical values related to the Transmission Antenna Power, Gain etc
          wifiPhy.Set ("TxPowerStart", DoubleValue(33));
          wifiPhy.Set ("TxPowerEnd", DoubleValue(33));
          wifiPhy.Set ("TxPowerLevels", UintegerValue(1));
          wifiPhy.Set ("TxGain", DoubleValue(0));
          wifiPhy.Set ("RxGain", DoubleValue(0));
          wifiPhy.Set ("EnergyDetectionThreshold", DoubleValue(-61.8));
          wifiPhy.Set ("CcaMode1Threshold", DoubleValue(-64.8));

           //Configuring the working channel of the wifi interface
          wifiPhy.SetChannel (wifiChannel.Create ());

          // Add a non-QoS upper mac
          NqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();
          wifiMac.SetType ("ns3::AdhocWifiMac");

          // Set 802.11b standard
          wifi.SetStandard (WIFI_PHY_STANDARD_80211b);

          wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",
                                        "DataMode",StringValue(phyMode),
                                        "ControlMode",StringValue(phyMode));

          //Creating the configured interfaces on the wireless nodes (OSI Layer 1)
          NetDeviceContainer wirelessDevices;
          wirelessDevices = wifi.Install (wifiPhy, wifiMac, wirelessNodes);

        
/*________________________________IP Assignation for ALL Nodes_____________________________*/



        //Installing ipStack for cabled and wireless nodes (bridge nodes included in those groups)
      
     
        InternetStackHelper ipStack2;
        OlsrHelper olsr;
        Ipv4ListRoutingHelper list;
        list.Add(olsr,10);
        ipStack2.SetRoutingHelper(list);
        ipStack2.Install (wirelessNodes);
         ipStack2.Install (cabledNodes);


        // Assing the ip addressed to cabled interfaces
         NS_LOG_INFO ("Assign ip addresses to bridge nodes.");
         Ipv4AddressHelper ip;
         ip.SetBase ("10.0.0.0", "255.255.255.0");
        Ipv4InterfaceContainer bridgeAddresses = ip.Assign (bridgeDevices);

         // Assing the ip addressed to cabled interfaces
         NS_LOG_INFO ("Assign ip addresses to cabled nodes.");
         ip.SetBase ("192.168.0.0", "255.255.255.0");
        Ipv4InterfaceContainer cabledAddresses = ip.Assign (cableDevices);





        // Assing the ip addressed to wireless interfaces
         NS_LOG_INFO ("Assign ip addresses to wireless nodes.");
         ip.SetBase ("192.168.1.0", "255.255.255.0");
        Ipv4InterfaceContainer wirelessAddresses = ip.Assign (wirelessDevices);



        

  

        Ipv4GlobalRoutingHelper::PopulateRoutingTables ();


/*___________________________________________________________________________________________*/

//Configuring the position of the wireless nodes and their mobility
  MobilityHelper mobility;
  Ptr<ListPositionAllocator> positionAlloc = CreateObject <ListPositionAllocator>();
  positionAlloc ->Add(Vector(0, 0, 0)); // bridge 
  positionAlloc ->Add(Vector(1000, 0, 0)); // node1 -- starting very far away
  positionAlloc ->Add(Vector(800, 0, 0)); // node2
  positionAlloc ->Add(Vector(700, 0, 0)); 
  positionAlloc ->Add(Vector(500, 0, 0)); 
  positionAlloc ->Add(Vector(300, 0, 0)); 
  positionAlloc ->Add(Vector(100, 0, 0)); 
  mobility.SetPositionAllocator(positionAlloc);
  mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
  mobility.Install(wirelessNodes);



//Generating OnOff Constant Traffic from all the wireless nodes to a cabled node
 UdpEchoServerHelper echoServer (9);
 ApplicationContainer serverApps = echoServer.Install (cabledNodes.Get (4));
 serverApps.Start (Seconds (1.0));
 serverApps.Stop (Seconds (100.0));
OnOffHelper onoffconstant("ns3::UdpSocketFactory", InetSocketAddress (cabledAddresses.GetAddress(4),9));
onoffconstant.SetAttribute("OnTime",StringValue("ns3::ConstantRandomVariable[Constant=1.0]"));
onoffconstant.SetAttribute("OffTime",StringValue("ns3::ConstantRandomVariable[Constant=1.0]"));
ApplicationContainer apps = onoffconstant.Install (wirelessNodes);
apps.Start (Seconds (2.0));
apps.Stop (Seconds (99.0));

//Generating OnOff Exponential Traffic from all the wireless nodes to a cabled node
 UdpEchoServerHelper echoServer2 (9);
 ApplicationContainer serverApps2 = echoServer2.Install (cabledNodes.Get (4));
 serverApps2.Start (Seconds (101.0));
 serverApps2.Stop (Seconds (200.0));
OnOffHelper onoffexponential("ns3::UdpSocketFactory", InetSocketAddress (cabledAddresses.GetAddress(2),9));
onoffexponential.SetAttribute("OnTime",StringValue("ns3::ExponentialRandomVariable[Mean=1.0]"));
onoffexponential.SetAttribute("OffTime",StringValue("ns3::ExponentialRandomVariable[Mean=1.0]"));
ApplicationContainer apps2 = onoffexponential.Install (wirelessNodes);
apps2.Start (Seconds (102.0));
apps2.Stop (Seconds (199.0));

//Generating OnOff Cauchy Mix Poissson Traffic from all the wireless nodes to a cabled node
 UdpEchoServerHelper echoServer3 (9);
 ApplicationContainer serverApps3 = echoServer3.Install (cabledNodes.Get (4));
 serverApps3.Start (Seconds (201.0));
 serverApps3.Stop (Seconds (300.0));
OnOffHelper onoffcauchypoissson("ns3::UdpSocketFactory", InetSocketAddress (cabledAddresses.GetAddress(2),9));
onoffcauchypoissson.SetAttribute("OnTime",StringValue("ns3::CauchyRandomVariable[alpha=0|beta=1|min=0|max=3]"));
onoffcauchypoissson.SetAttribute("OffTime",StringValue("ns3::PoissonRandomVariable[Lambda=1]"));
ApplicationContainer apps3 = onoffcauchypoissson.Install (wirelessNodes);
apps3.Start (Seconds (202.0));
apps3.Stop (Seconds (299.0));

pointToPoint.EnablePcapAll("PTP-Constant");



        Simulator::Run ();
        Simulator::Destroy ();
        return 0;
}

